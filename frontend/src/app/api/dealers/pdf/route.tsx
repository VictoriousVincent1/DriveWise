import { NextRequest } from 'next/server';
import { adminDb } from '@/lib/firebaseAdmin';
import React from 'react';
import { Document, Page, Text, View, StyleSheet, pdf as renderPdf } from '@react-pdf/renderer';

// Ensure we run in the Node.js runtime (needed for @react-pdf/renderer)
export const runtime = 'nodejs';

const styles = StyleSheet.create({
  page: { padding: 24 },
  title: { fontSize: 20, marginBottom: 12, textAlign: 'center' },
  section: { marginBottom: 12 },
  heading: { fontSize: 14, marginBottom: 6, fontWeight: 700 },
  row: { marginBottom: 4, flexDirection: 'row' },
  key: { fontSize: 11, fontWeight: 700 },
  value: { fontSize: 11 },
  code: { fontSize: 10 },
});

function isPrimitive(val: any) {
  return (
    typeof val === 'string' ||
    typeof val === 'number' ||
    typeof val === 'boolean' ||
    val === null
  );
}

function SafeValue({ value }: { value: any }) {
  if (isPrimitive(value)) {
    return <Text style={styles.value}>{String(value)}</Text>;
  }
  try {
    return <Text style={styles.code}>{JSON.stringify(value, null, 2)}</Text>;
  } catch {
    return <Text style={styles.value}>[Unserializable]</Text>;
  }
}

function KeyValueList({ data }: { data: Record<string, any> }) {
  const entries = Object.entries(data || {});
  if (entries.length === 0) return <Text style={styles.value}>No data</Text>;
  return (
    <View>
      {entries.map(([k, v]) => (
        <View key={k} style={styles.row}>
          <Text style={styles.key}>{k}: </Text>
          <SafeValue value={v} />
        </View>
      ))}
    </View>
  );
}

function UserPdfDoc({ user, tradeIns, appointments, userId }: { user: Record<string, any>; tradeIns: any[]; appointments: any[]; userId: string }) {
  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <Text style={styles.title}>User Profile Export</Text>

        <View style={styles.section}>
          <Text style={styles.heading}>User Document (users/{`{${userId}}`})</Text>
          <KeyValueList data={user} />
        </View>

        <View style={styles.section}>
          <Text style={styles.heading}>appointments (where userId == {userId}) — {appointments.length}</Text>
          {appointments.length === 0 ? (
            <Text style={styles.value}>No appointments found</Text>
          ) : (
            appointments.map((a, idx) => (
              <View key={idx} style={{ marginBottom: 8 }}>
                <Text style={{ fontSize: 12, fontWeight: 700 }}>Appointment #{idx + 1}</Text>
                <KeyValueList data={a} />
              </View>
            ))
          )}
        </View>

        <View style={styles.section}>
          <Text style={styles.heading}>trade-ins subcollection ({tradeIns.length})</Text>
          {tradeIns.length === 0 ? (
            <Text style={styles.value}>No trade-in records</Text>
          ) : (
            tradeIns.map((t, idx) => (
              <View key={idx} style={{ marginBottom: 8 }}>
                <Text style={{ fontSize: 12, fontWeight: 700 }}>Trade-in #{idx + 1}</Text>
                <KeyValueList data={t} />
              </View>
            ))
          )}
        </View>

        <Text style={{ fontSize: 9, color: '#555', marginTop: 8 }}>
          Generated by DriveWise — {new Date().toLocaleString()}
        </Text>
      </Page>
    </Document>
  );
}

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const userId = searchParams.get('userId');
    if (!userId) {
      return new Response('Missing userId', { status: 400 });
    }

    // Load user doc
    const userSnap = await adminDb.collection('users').doc(String(userId)).get();
    if (!userSnap.exists) {
      return new Response('User not found', { status: 404 });
    }
    const userData = userSnap.data() || {};

    // Load optional trade-ins subcollection
    let tradeIns: any[] = [];
    try {
      const subSnap = await adminDb
        .collection('users')
        .doc(String(userId))
        .collection('trade-ins')
        .get();
      tradeIns = subSnap.docs.map((d: any) => ({ id: d.id, ...d.data() }));
    } catch {
      tradeIns = [];
    }

    // Load user's appointments (top-level collection) if present
    let appointments: any[] = [];
    try {
      const apptSnap = await adminDb
        .collection('appointments')
        .where('userId', '==', String(userId))
        .get();
      appointments = apptSnap.docs.map((d: any) => ({ id: d.id, ...d.data() }));
    } catch {
      appointments = [];
    }

    const instance = renderPdf(
      <UserPdfDoc user={userData} tradeIns={tradeIns} appointments={appointments} userId={String(userId)} />
    );
    const buffer = (await instance.toBuffer()) as unknown as Uint8Array;
    return new Response(buffer as any, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `inline; filename="user-${userId}.pdf"`,
        'Cache-Control': 'no-cache',
      },
    });
  } catch (err: any) {
    console.error('PDF generation error:', err);
    return new Response('Failed to generate PDF', { status: 500 });
  }
}
